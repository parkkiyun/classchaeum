import emailjs from '@emailjs/browser'

// EmailJS Ï¥àÍ∏∞Ìôî (Î∞∞Ìè¨Ïö© ÌïòÎìúÏΩîÎî©)
const EMAILJS_SERVICE_ID = import.meta.env.VITE_EMAILJS_SERVICE_ID || 'service_p8yxfpc'
const EMAILJS_TEMPLATE_ID = import.meta.env.VITE_EMAILJS_TEMPLATE_ID || 'template_htffu4x'
const EMAILJS_PUBLIC_KEY = import.meta.env.VITE_EMAILJS_PUBLIC_KEY || 'syDM-ZhdAJ0931jn6'

// EmailJS Ï¥àÍ∏∞Ìôî
if (EMAILJS_PUBLIC_KEY) {
  emailjs.init(EMAILJS_PUBLIC_KEY)
}

export interface EmailParams {
  to_email: string
  student_name: string
  survey_title: string
  edit_link: string
}

export const sendEditLink = async (params: EmailParams): Promise<boolean> => {
  try {
    console.log('üìß EmailJS ÏÑúÎπÑÏä§ Ìò∏Ï∂ú ÏãúÏûë')
    console.log('üìã Ïù¥Î©îÏùº ÌååÎùºÎØ∏ÌÑ∞:', params)
    console.log('üîß ÌôòÍ≤ΩÎ≥ÄÏàò ÏÉÅÌÉú:', {
      hasServiceId: !!EMAILJS_SERVICE_ID,
      hasTemplateId: !!EMAILJS_TEMPLATE_ID,
      hasPublicKey: !!EMAILJS_PUBLIC_KEY
    })
    console.log('üîç ÌôòÍ≤ΩÎ≥ÄÏàò Ïã§Ï†úÍ∞í:', {
      serviceId: EMAILJS_SERVICE_ID,
      templateId: EMAILJS_TEMPLATE_ID,
      publicKey: EMAILJS_PUBLIC_KEY ? `${EMAILJS_PUBLIC_KEY.substring(0, 8)}...` : 'undefined'
    })
    console.log('üåç Ï†ÑÏ≤¥ ÌôòÍ≤ΩÎ≥ÄÏàò:', import.meta.env)

    if (!EMAILJS_SERVICE_ID || !EMAILJS_TEMPLATE_ID || !EMAILJS_PUBLIC_KEY) {
      console.warn('‚ö†Ô∏è EmailJS ÌôòÍ≤ΩÎ≥ÄÏàòÍ∞Ä ÏÑ§Ï†ïÎêòÏßÄ ÏïäÏïòÏäµÎãàÎã§.')
      console.log('üîó Í∞úÎ∞ú Î™®Îìú - ÏÑ§Î¨∏ ÏàòÏ†ï ÎßÅÌÅ¨:', params.edit_link)
      
      // Í∞úÎ∞ú ÌôòÍ≤ΩÏóêÏÑúÎäî ÏÑ±Í≥µÏúºÎ°ú Ï≤òÎ¶¨
      return true
    }

    const emailData = {
      to_email: params.to_email,
      to_name: params.student_name, // Î∞õÎäî ÏÇ¨Îûå Ïù¥Î¶Ñ
      student_name: params.student_name,
      survey_title: params.survey_title,
      edit_link: params.edit_link,
      from_name: 'ÌÅ¥ÎûòÏä§Ï±ÑÏõÄ ÌåÄ',
      reply_to: 'noreply@hanolchaeum.web.app'
    }

    console.log('üì§ EmailJSÎ°ú Ï†ÑÏÜ°Ìï† Îç∞Ïù¥ÌÑ∞:', emailData)

    const result = await emailjs.send(
      EMAILJS_SERVICE_ID,
      EMAILJS_TEMPLATE_ID,
      emailData
    )

    console.log('‚úÖ Ïù¥Î©îÏùº Î∞úÏÜ° ÏÑ±Í≥µ:', result)
    return true
  } catch (error) {
    console.error('‚ùå Ïù¥Î©îÏùº Î∞úÏÜ° Ïã§Ìå®:', error)
    console.error('üîç ÏÉÅÏÑ∏ Ïò§Î•ò:', {
      name: (error as any)?.name,
      message: (error as any)?.message,
      text: (error as any)?.text,
      status: (error as any)?.status
    })
    return false
  }
}

export const isEmailConfigured = (): boolean => {
  return !!(EMAILJS_SERVICE_ID && EMAILJS_TEMPLATE_ID && EMAILJS_PUBLIC_KEY)
} 